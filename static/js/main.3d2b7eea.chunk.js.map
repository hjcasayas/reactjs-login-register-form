{"version":3,"sources":["pages/home-page/home-page.component.jsx","components/login-form/login-form.component.jsx","pages/login-page/login-page.component.jsx","components/register-form/register-form.component.jsx","pages/register-page/register-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","Title","Typography","Text","className","strong","Group","size","type","to","loginForm","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","resetFields","this","getFieldDecorator","onSubmit","Item","rules","required","message","prefix","style","color","placeholder","htmlType","block","PureComponent","LoginForm","Form","create","name","LoginPage","level","registerform","compareToFirstPassword","rule","value","callback","getFieldValue","compareToNextPassword","state","confirmDirty","force","handleConfirmBlur","target","setState","validator","Password","onBlur","Registerform","RegisterPage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d2b7eea.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport './home-page.styles.scss';\n\nconst HomePage = () => {\n  const { Title, Text } = Typography;\n\n  return (\n    <div className='home-page'>\n      <Title>Welcome!</Title>\n      <Text className='text' strong>\n        To ReactJS Sign In and Registration Form Demo\n      </Text>\n      <div className='home-page__button-container'>\n        <Button.Group size='large'>\n          <Button type='primary'>\n            <Link to='/login'>Sign In</Link>\n          </Button>\n          <Button type='default'>\n            <Link to='/register'>Register</Link>\n          </Button>\n        </Button.Group>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React, { PureComponent } from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nclass loginForm extends PureComponent {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(values);\n        this.props.form.resetFields();\n      }\n    });\n  };\n\n  render() {\n    console.log(this.props);\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form className='login-form' onSubmit={this.handleSubmit}>\n        <Form.Item>\n          {getFieldDecorator('email', {\n            rules: [\n              { required: true, message: 'Please input your email!' },\n              { type: 'email', message: 'Please input a valid email' }\n            ]\n          })(\n            <Input\n              prefix={<Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Email'\n              size='large'\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your password!' }]\n          })(\n            <Input\n              prefix={<Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type='password'\n              placeholder='Password'\n              size='large'\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type='primary' htmlType='submit' size='large' block>\n            Log in\n          </Button>\n          <Button htmlType='button' type='link' size='large' block>\n            <Link to='/register'>Register</Link>\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst LoginForm = Form.create({ name: 'login-form' })(loginForm);\n\nexport default LoginForm;\n","import React, { PureComponent } from 'react';\nimport { Card, Typography, Icon, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { LoginForm } from '../../components/login-form';\n\nimport './login-page.styles.scss';\n\nclass LoginPage extends PureComponent {\n  render() {\n    const { Title } = Typography;\n    return (\n      <div className='login-page'>\n        <Card className='login-page__card'>\n          <div className='login-page__card__header'>\n            <Title level={4}>SIGN IN</Title>\n            <Button type='link'>\n              <Icon\n                type='arrow-left'\n                className='login-page__card__arrow-left'\n              />\n              <Link to='/'>Back To Home</Link>\n            </Button>\n          </div>\n          <LoginForm />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { PureComponent } from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nclass registerform extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      confirmDirty: false\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(values);\n        this.props.form.resetFields();\n      }\n    });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Passwords does not match!');\n    } else {\n      callback();\n    }\n  };\n\n  compareToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    } else {\n      callback();\n    }\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  render() {\n    console.log(this.props);\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form className='register-form' onSubmit={this.handleSubmit}>\n        {/* EMAIL */}\n        <Form.Item>\n          {getFieldDecorator('email', {\n            rules: [\n              { required: true, message: 'Please input your email!' },\n              { type: 'email', message: 'Please input a valid email' }\n            ]\n          })(\n            <Input\n              prefix={<Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Email'\n              size='large'\n            />\n          )}\n        </Form.Item>\n\n        {/* PASSWORD */}\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(\n            <Input.Password\n              prefix={<Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Password'\n              size='large'\n            />\n          )}\n        </Form.Item>\n\n        {/* CONFIRM PASSWORD */}\n        <Form.Item>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!',\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(\n            <Input.Password\n              prefix={<Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Confirm Password'\n              size='large'\n              onBlur={this.handleConfirmBlur}\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type='primary' htmlType='submit' size='large' block>\n            Register\n          </Button>\n          <Button htmlType='button' type='link' size='large' block>\n            <Link to='/login'>Sign In</Link>\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst Registerform = Form.create({ name: 'register-form' })(registerform);\n\nexport default Registerform;\n","import React, { PureComponent } from 'react';\nimport { Card, Typography, Icon, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { RegisterForm } from '../../components/register-form';\n\nimport './register-page.styles.scss';\n\nclass RegisterPage extends PureComponent {\n  render() {\n    const { Title } = Typography;\n    return (\n      <div className='register-page'>\n        <Card className='register-page__card'>\n          <div className='register-page__card__header'>\n            <Title level={4}>Register</Title>\n            <Button type='link'>\n              <Icon\n                type='arrow-left'\n                className='register-page__card__arrow-left'\n              />\n              <Link to='/'>Back To Home</Link>\n            </Button>\n          </div>\n          <RegisterForm />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default RegisterPage;\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { HomePage } from './pages/home-page';\nimport { LoginPage } from './pages/login-page';\nimport { RegisterPage } from './pages/register-page';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Router>\n        <Switch>\n          <Route path='/login'>\n            <LoginPage />\n          </Route>\n          <Route path='/register'>\n            <RegisterPage />\n          </Route>\n          <Route path='/'>\n            <HomePage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}